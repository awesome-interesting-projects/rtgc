very useful to keep debuinfo up to date
dnf --enablerepo=updates-debuginfo update

m-x gud-gdb to switch *dedicated* window
c-x c-a c-b to set breakpoint at point line. Who changed this and why?

service sshd start
// to enable sshd at boot time
systemctl enable sshd.service


git clone https://github.com/wadehennessey/rtgc.git
or
git checkout <commit hash> 


git commit -am "blah"
# then must push commit
git push



use #define _GNU_SOURCE for weird compile problems not seeing decls


gdb> info signals
use next instead of continue to switch to diff thread break points

Semaphores
------------
in alloc when out of memory:
sem_post(&gc_semaphore);
sem_wait(&gc_semaphore);	

in rtgc_loop:
sem_wait(&gc_semaphore);
full_gc();
sem_post(&gc_semaphore);
------------

# these go in .gdbinit
handle SIGUSR1 nostop
set non-stop on

>set non-stop on
>set non-stop off
>show non-stop
>interrupt     will stop the running thread
>break a.c:166 if (j == 1535)


wmctrl -r "emacs" -e 1,-1,-1,770,1010



TODO:
-----
verify:
double linked lists correct - (obj->next)->prev == obj, (obj->prev)->next == obj
verify color in header and color in list are the same
verify all _count fields are correct.

# to limit all threads in ./a to the second core:
taskset 0x10 ./a

# rr traces are stored in /home/wade/.local/share/rr/

gdb tui mode in xterm: c-x a

too see event numbers and start at a specific event number:
rr -M replay -g <event-number>


try gdb cmds:
-------------
checkpoint
info checkpoints - not implemented
restart <cp-id>
delete <cp-id>

gdb "when" command shows current event-number

try rr -c and -e options to increase thread interleave

# task switch after every N retired branches
rr record -c 2500 ./a

# I think I recorded "the bug" with this (compile "make debug")
rr record -c 5 ./a

# to see record options
rr record -h
rr replay -h

From rr/src/Scheduler.h
-c default:  enum { DEFAULT_MAX_TICKS = 250000 };    // 50ms time slice
-e default:  enum { DEFAULT_MAX_EVENTS = 10 };

To run real-time round-robin:
-----------------
chrt --rr 30 ./a
or
chrt --fifo 30 ./a

ps -Lo pid,tid,class <./a pid #>


To add swap
------------
su
cd /home
dd if=/dev/zero of=bigswapfile bs=1G count=64
chmod 600 /root/bigswapfile
mkswap bigswapfile
swapon bigswapfile

in /etc/fstab add:
/home/bigswapfile		swap		swap	defaults	0 0


flip
-------
200ns for the "null" signal and return time. Includes double the "system" time.
Mean 5000 "null" signal and returns per 1ms.

Time for 1,000,000 "null" kill signal and returns 
real	0m0.209s
user	0m0.029s
sys	0m0.389s

---------------------------------------------

try gcc -mcmodel=large to avoid dlopen relocation problems in wcl

change wcl print level to once for lib, once for compiler. Make it easy to change back.

Add IF_COUNTING/DEBUG wrappers

switch *debug-library-config* to *delivery-library-config* when doing build
to speed things up
--------------

add .gdbinit to rtgc, make ~/.gdbinit a link to rtgc version
add .wclinit to wcl, make ~/.wclinit a link



--------------------------------
clang stuff

run "clang -### -c a.c" to see full command line the driver generates, 
then append "-ast-dump" to the end and run it.

in build dir "make clang" will just rebuild clang


AST Matcher
-------------
NOTE: clang-query only reads file passed to it *ONCE* at startup. File changes
after file is read are *NOT* seen.

/home/wade/build/bin/clang-query /tmp/w.c --
> set output diag
> match binaryOperator(hasOperatorName("="),hasRHS(expr(hasType(isInteger())))).bind("assign")

to handle memset/memcpy:
> match callExpr(callee(functionDecl(hasName("memset"))))
----------
export C_INCLUDE_PATH=/home/wade/build/lib/clang/4.0.0/include



void s1(CONS *lhs, CONS *rhs) {
  *lhs = *rhs;
}

|-FunctionDecl 0x55b71f315850 <line:8:1, line:10:1> line:8:6 s1 'void (CONS *, CONS *)'
| |-ParmVarDecl 0x55b71f2c9d78 <col:9, col:15> col:15 used lhs 'CONS *'
| |-ParmVarDecl 0x55b71f2c9de8 <col:20, col:26> col:26 used rhs 'CONS *'
| `-CompoundStmt 0x55b71f315a48 <col:31, line:10:1>
|   `-BinaryOperator 0x55b71f315a20 <line:9:3, col:11> 'CONS':'struct cons' '='
|     |-UnaryOperator 0x55b71f315988 <col:3, col:4> 'CONS':'struct cons' lvalue prefix '*'
|     | `-ImplicitCastExpr 0x55b71f315970 <col:4> 'CONS *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b71f315948 <col:4> 'CONS *' lvalue ParmVar 0x55b71f2c9d78 'lhs' 'CONS *'
|     `-ImplicitCastExpr 0x55b71f315a08 <col:10, col:11> 'CONS':'struct cons' <LValueToRValue>
|       `-UnaryOperator 0x55b71f3159e8 <col:10, col:11> 'CONS':'struct cons' lvalue prefix '*'
|         `-ImplicitCastExpr 0x55b71f3159d0 <col:11> 'CONS *' <LValueToRValue>
|           `-DeclRefExpr 0x55b71f3159a8 <col:11> 'CONS *' lvalue ParmVar 0x55b71f2c9de8 'rhs' 'CONS *'

mem1

|-FunctionDecl 0x5620f5266758 <line:13:1, line:15:1> line:13:6 mem1 'void (CONS *, CONS *)'
| |-ParmVarDecl 0x5620f5266658 <col:11, col:17> col:17 used lhs 'CONS *'
| |-ParmVarDecl 0x5620f52666c8 <col:22, col:28> col:28 rhs 'CONS *'
| `-CompoundStmt 0x5620f5266980 <col:33, line:15:1>
|   `-CallExpr 0x5620f5266910 <line:14:3, col:30> 'void *'
|     |-ImplicitCastExpr 0x5620f52668f8 <col:3> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5620f5266810 <col:3> 'void *(void *, int, unsigned long)' Function 0x5620f52587d0 'memset' 'void *(void *, int, unsigned long)'
|     |-ImplicitCastExpr 0x5620f5266968 <col:10> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x5620f5266950 <col:10> 'CONS *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5620f5266838 <col:10> 'CONS *' lvalue ParmVar 0x5620f5266658 'lhs' 'CONS *'
|     |-IntegerLiteral 0x5620f5266860 <col:15> 'int' 0
|     `-UnaryExprOrTypeTraitExpr 0x5620f5266890 <col:18, col:29> 'unsigned long' sizeof 'CONS':'struct cons'

mem2

|-FunctionDecl 0x5620f5266ab0 <line:17:1, line:19:1> line:17:6 mem2 'void (CONS *, CONS *)'
| |-ParmVarDecl 0x5620f52669b0 <col:11, col:17> col:17 used lhs 'CONS *'
| |-ParmVarDecl 0x5620f5266a20 <col:22, col:28> col:28 used rhs 'CONS *'
| `-CompoundStmt 0x5620f5266d20 <col:33, line:19:1>
|   `-CallExpr 0x5620f5266c80 <line:18:3, col:32> 'void *'
|     |-ImplicitCastExpr 0x5620f5266c68 <col:3> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5620f5266b68 <col:3> 'void *(void *, const void *, unsigned long)' Function 0x5620f5257898 'memcpy' 'void *(void *, const void *, unsigned long)'
|     |-ImplicitCastExpr 0x5620f5266cd8 <col:10> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x5620f5266cc0 <col:10> 'CONS *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5620f5266b90 <col:10> 'CONS *' lvalue ParmVar 0x5620f52669b0 'lhs' 'CONS *'
|     |-ImplicitCastExpr 0x5620f5266d08 <col:15> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x5620f5266cf0 <col:15> 'CONS *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5620f5266bb8 <col:15> 'CONS *' lvalue ParmVar 0x5620f5266a20 'rhs' 'CONS *'
|     `-UnaryExprOrTypeTraitExpr 0x5620f5266bf0 <col:20, col:31> 'unsigned long' sizeof 'CONS':'struct cons'
